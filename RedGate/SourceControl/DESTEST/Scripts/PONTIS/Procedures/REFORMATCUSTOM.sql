CREATE OR REPLACE PROCEDURE pontis.ReformatCustom(I_REFORMAT_TABLE IN VARCHAR2,
                                           I_REFORMAT_COL   IN VARCHAR2)
AS
    V_HAS_ROWS_TO_REFORMAT PLS_INTEGER;

    TYPE T_COLS_TABLE IS TABLE OF VARCHAR2(30);
    V_PRECEDING_COLS_TABLE T_COLS_TABLE;
    V_REFORMAT_COL_TABLE T_COLS_TABLE;

    TYPE T_Q_TABLE IS TABLE OF VARCHAR2(3000);
    V_Q_TABLE T_Q_TABLE;

    V_Q VARCHAR2(3000);
    V_X PLS_INTEGER;
    V_ADD_TO_SOURCE PLS_INTEGER;

    V_NEXT_ID PLS_INTEGER;

    V_PRECEDING_COLS VARCHAR2(300);-- THE OTHER COLUMNS OF THE PRIMARY KEY.

BEGIN
    BEGIN
        --Is there something to reformat?
        V_Q := 'SELECT COUNT(*) FROM ' || I_REFORMAT_TABLE || ' WHERE ' || I_REFORMAT_COL || ' < 15000 AND (PONTIS_STANDARD_IND IS NULL OR PONTIS_STANDARD_IND <> ''T'') AND ROWNUM = 1';
        EXECUTE IMMEDIATE V_Q
        INTO V_HAS_ROWS_TO_REFORMAT;

        IF V_HAS_ROWS_TO_REFORMAT = 0 THEN
            RETURN;
        END IF;

        --DBMS_OUTPUT.PUT_LINE(V_HAS_ROWS_TO_REFORMAT);

        --Find amount to add to the smallest value in I_REFORMAT_COL to reformat it to 15000 (or more if there are already rows that have
        --been reformatted).
        V_Q := 'SELECT
                (SELECT GREATEST(15000, MAX(' || I_REFORMAT_COL  || ')) + 1 FROM ' || I_REFORMAT_TABLE || ')
                -
                (SELECT NVL(MIN(' || I_REFORMAT_COL || '),0) FROM ' || I_REFORMAT_TABLE || ' WHERE ' || I_REFORMAT_COL || ' < 15000 AND (PONTIS_STANDARD_IND IS NULL OR PONTIS_STANDARD_IND <> ''T''))
                FROM
                DUAL';

         EXECUTE IMMEDIATE V_Q INTO V_ADD_TO_SOURCE;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error in ReformatCustom: ' || I_REFORMAT_TABLE || ' - ' || I_REFORMAT_COL || '; ' || SQLERRM);
            DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
            RETURN;
    END;

    --Set V_PRECEDING_COLS with a comma separated list of the columns in the primary key of I_REFORMAT_TABLE up to the column to be reformatted.
    SELECT COLUMN_NAME BULK COLLECT INTO V_PRECEDING_COLS_TABLE
    FROM USER_CONS_COLUMNS CC
    JOIN USER_CONSTRAINTS C ON CC.CONSTRAINT_NAME = C.CONSTRAINT_NAME
    WHERE C.TABLE_NAME = I_REFORMAT_TABLE AND C.CONSTRAINT_TYPE = 'P';

    V_REFORMAT_COL_TABLE := T_COLS_TABLE();
    V_REFORMAT_COL_TABLE.EXTEND;
    V_REFORMAT_COL_TABLE(1) := I_REFORMAT_COL;
    V_PRECEDING_COLS_TABLE := V_PRECEDING_COLS_TABLE MULTISET EXCEPT V_REFORMAT_COL_TABLE;

    IF V_PRECEDING_COLS_TABLE IS NOT EMPTY THEN
        FOR I IN V_PRECEDING_COLS_TABLE.FIRST..V_PRECEDING_COLS_TABLE.LAST
        LOOP
            V_PRECEDING_COLS := V_PRECEDING_COLS || V_PRECEDING_COLS_TABLE(I) || ', ';
        END LOOP;
    END IF;

    --Build the update statements to reformat tables related to I_REFORMAT_TABLE and collect them in V_Q_TABLE.
    SELECT DISTINCT
        'UPDATE ' || TARGET_TABLE || ' SET ' || TARGET_COL || ' = ' || TARGET_COL || '
                + ' || V_ADD_TO_SOURCE || '
         WHERE (' || V_PRECEDING_COLS || TARGET_COL || ') IN (
            SELECT ' || V_PRECEDING_COLS || I_REFORMAT_COL || ' FROM ' || I_REFORMAT_TABLE || '
            WHERE (PONTIS_STANDARD_IND IS NULL OR PONTIS_STANDARD_IND <> ''T'') AND ' || I_REFORMAT_COL || ' < 15000)'
    BULK COLLECT INTO V_Q_TABLE
    FROM (SELECT P.TABLE_NAME, P.CONSTRAINT_NAME, P_COLS.COLUMN_NAME, P_COLS.POSITION
          FROM USER_CONSTRAINTS P --PARENT
          JOIN USER_CONS_COLUMNS P_COLS ON P_COLS.CONSTRAINT_NAME = P.CONSTRAINT_NAME
          WHERE P.CONSTRAINT_TYPE IN ('P', 'U') AND P_COLS.COLUMN_NAME = I_REFORMAT_COL AND P.TABLE_NAME NOT LIKE '%\_T' ESCAPE '\') P_COLS2
    JOIN (SELECT R_CONSTRAINT_NAME, C.TABLE_NAME TARGET_TABLE, C_COLS.COLUMN_NAME TARGET_COL, C_COLS.POSITION
          FROM USER_CONSTRAINTS C --CHILD
          JOIN USER_CONS_COLUMNS C_COLS ON C_COLS.CONSTRAINT_NAME = C.CONSTRAINT_NAME
          JOIN USER_TABLES CHILD_TABLE ON CHILD_TABLE.TABLE_NAME = C.TABLE_NAME
          WHERE C.CONSTRAINT_TYPE = 'R' AND C.TABLE_NAME NOT LIKE '%\_T' ESCAPE '\') C_COLS2
    ON C_COLS2.R_CONSTRAINT_NAME = P_COLS2.CONSTRAINT_NAME AND C_COLS2.POSITION = P_COLS2.POSITION;

    --Execute the update statements.
    IF V_Q_TABLE IS NOT EMPTY THEN
        FOR I IN V_Q_TABLE.FIRST..V_Q_TABLE.LAST
        LOOP
            --DBMS_OUTPUT.PUT_LINE(I || '/' || V_Q_TABLE.COUNT || ': ' || V_Q_TABLE(I));
            --DBMS_OUTPUT.PUT_LINE(NULL);
            BEGIN
                EXECUTE IMMEDIATE(V_Q_TABLE(I));
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Error reformatting ' || V_Q_TABLE(I) || '; ' || SQLERRM);
                    DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
                    ROLLBACK;
                    RETURN;
            END;
        END LOOP;
    END IF;

    -- Reformat I_REFORMAT_TABLE.
    SELECT DISTINCT
        'UPDATE ' || I_REFORMAT_TABLE || '
         SET ' || I_REFORMAT_COL || ' = ' || I_REFORMAT_COL || ' + ' || V_ADD_TO_SOURCE || '
         ' || CASE WHEN EXISTS(SELECT 1 FROM USER_TAB_COLS WHERE TABLE_NAME = I_REFORMAT_TABLE AND COLUMN_NAME = 'ORDER_NUM') THEN ', ORDER_NUM = ORDER_NUM + 15000 ' END || '
         WHERE ' || I_REFORMAT_COL || ' < 15000 AND (PONTIS_STANDARD_IND IS NULL OR PONTIS_STANDARD_IND <> ''T'')'
    INTO V_Q
    FROM DUAL;

    --DBMS_OUTPUT.PUT_LINE('Reformat: ' || V_Q);

    BEGIN
        EXECUTE IMMEDIATE(V_Q);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error reformatting ' || I_REFORMAT_TABLE || ' and ' || I_REFORMAT_COL || ': ' || V_Q || '; ' || SQLERRM);
            DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
            ROLLBACK;
            RETURN;
    END;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error at end of reformatting ' || I_REFORMAT_TABLE || ' and ' || I_REFORMAT_COL || '; ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        ROLLBACK;
END;

/